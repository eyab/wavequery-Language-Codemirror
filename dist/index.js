import { LRParser } from '@lezer/lr';
import { NodeProp } from '@lezer/common';
import { LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@codemirror/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 13,
  states: "$bOYQPOOOOQO'#C_'#C_OkQPO'#CbOrQPO'#CeOOQO'#Co'#CoQOQPOOOzQPO'#CqOOQO,58|,58|O!SQPO,58|OOQO'#Cg'#CgO!XQPO'#CfO!^QPO'#CsOOQO,59P,59PO!fQPO,59POYQPO'#CjO!kQPO,59]OOQO1G.h1G.hOYQPO,59QOuQPO'#CkO!sQPO,59_OOQO1G.k1G.kOOQO,59U,59UOOQO-E6h-E6hOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6i",
  stateData: "!{~ObOSPOS~OTQOWRO[SO]SOdPO~OSVO~PYOV[OdXO~Of^OSeX~OS`O~OhaO~OfbOVgX~OVdO~Of^OSea~OfbOVga~O",
  goto: "!ihPPPiPPiPPiouPPy!PPPP!VP!cP!fXSOQ^aQZRRhbTYRbQ_URf_QcZRicQTOQUQQe^RgaRWQR]R",
  nodeNames: "âš  LineComment waveText String ] [ Array } { Object Property PropertyName Empty Signal_string",
  maxTerm: 24,
  nodeProps: [
    [NodeProp.openedBy, 4,"[",7,"{"],
    [NodeProp.closedBy, 5,"]",8,"}"]
  ],
  skippedNodes: [0,1],
  repeatNodeCount: 2,
  tokenData: "&W~R]XYzYZz]^zpqzrs!]|}$t![!]$y!]!^%O!}#O%Z#P#Q%`#b#c%e#o#p%|#q#r&R~!PSb~XYzYZz]^zpqz~!`Upq!]qr!]rs!rs#O!]#O#P$X#P~!]~!wPd~!}#O!z~!}Ppq#Q~#TPpq#W~#ZP!}#O#^~#aQ#g#h#g#i#j#g~#jP#P#Q#m~#pS#U#V#|#W#X#|#[#]#|#c#d#|~$PP#P#Q$S~$XO]~~$[Wrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]~$yOf~~%OOh~~%TQP~OY%OZ~%O~%`OT~~%eOS~~%hP#i#j%k~%nP#`#a%q~%tP#`#a%w~%|O[~~&ROW~~&WOV~",
  tokenizers: [0],
  topRules: {"waveText":[0,2]},
  tokenPrec: 0
});

/// A language provider that provides Waveform Query(WaveQL) Language parsing.
const wavequeryLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                //Application: delimitedIndent({closing: ")", align: false})
                Object: continuedIndent({ except: /^\s*\}/ }),
                Array: continuedIndent({ except: /^\s*\]/ })
            }),
            foldNodeProp.add({
                "Object Array": foldInside
            }),
            styleTags({
                String: tags.string,
                LineComment: tags.lineComment,
                null: tags.null,
                ",": tags.separator,
                "[ ]": tags.squareBracket,
                "{ }": tags.brace,
                "( )": tags.paren
            })
        ]
    }),
    languageData: {
        //commentTokens: {line: "//"},
        closeBrackets: { brackets: ["[", "{", '"'] },
        indentOnInput: /^\s*[\}\]]$/
    }
});
function wavequery() {
    return new LanguageSupport(wavequeryLanguage);
}

export { wavequery, wavequeryLanguage };
